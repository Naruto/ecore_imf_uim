diff --git a/ecore/configure.ac b/ecore/configure.ac
index fd8a328..58bb4de 100644
--- a/ecore/configure.ac
+++ b/ecore/configure.ac
@@ -164,6 +164,7 @@ want_ecore_evas_software_16_wince="no"
 
 # ecore_imf modules
 want_ecore_imf_xim="no"
+want_ecore_imf_uim="no"
 
 case "$host_os" in
    mingw32ce* | cegcc*)
@@ -219,6 +220,7 @@ case "$host_os" in
       want_ecore_evas_directfb="yes"
       want_ecore_evas_fb="yes"
       want_ecore_imf_xim="yes"
+      want_ecore_imf_uim="yes"
       ;;
 esac
 
@@ -240,6 +242,7 @@ requirements_ecore_x=""
 requirements_ecore_win32=""
 requirements_ecore_wince=""
 requirements_ecore_imf_xim=""
+requirements_ecore_imf_uim=""
 
 ### Additional options to configure
 
@@ -1338,6 +1341,20 @@ fi
 ECORE_CHECK_MODULE([imf-xim], [${want_ecore_imf}], [Imf_XIM], [${ecore_imf_xim_deps}],
    [requirements_ecore_imf_xim="ecore-imf >= 1.0.0 ecore-x >= 1.0.0 ecore-input >= 1.0.0 ${requirements_ecore_imf_xim}"])
 
+
+# XXX add checking uim libraries
+# ecore_imf_uim
+AM_CONDITIONAL(BUILD_ECORE_IMF_UIM, false)
+ecore_imf_uim_deps="no"
+if test    "x${have_ecore_imf}" = "xyes" \
+        -a "x${have_ecore_input}" = "xyes" ; then
+   ecore_imf_uim_deps="yes"
+   AC_DEFINE(BUILD_ECORE_IMF_UIM, 1, [Ecore Imf UIM Support])
+fi
+
+ECORE_CHECK_MODULE([imf-uim], [${want_ecore_imf}], [Imf_XIM], [${ecore_imf_uim_deps}],
+   [requirements_ecore_imf_uim="ecore-imf >= 1.0.0 ecore-input >= 1.0.0 ${requirements_ecore_imf_uim}"])
+
 ## Graphic systems
 
 # ecore_x{cb}
@@ -1600,6 +1617,7 @@ AC_SUBST(requirements_ecore_x)
 AC_SUBST(requirements_ecore_win32)
 AC_SUBST(requirements_ecore_wince)
 AC_SUBST(requirements_ecore_imf_xim)
+AC_SUBST(requirements_ecore_imf_uim)
 
 AC_CONFIG_FILES([
 Makefile
@@ -1651,6 +1669,7 @@ src/tests/Makefile
 src/modules/Makefile
 src/modules/immodules/Makefile
 src/modules/immodules/xim/Makefile
+src/modules/immodules/uim/Makefile
 README
 ecore.spec
 $po_makefile_in
@@ -1705,6 +1724,7 @@ fi
 #echo "  Ecore_Config.................: $have_ecore_config (deprecated)"
 echo "  Ecore_IMF....................: $have_ecore_imf"
 echo "    XIM........................: $have_ecore_imf_xim"
+echo "    UIM........................: $have_ecore_imf_uim"
 echo "  Ecore_IMF_Evas...............: $have_ecore_imf_evas"
 echo "  Ecore_Input..................: $have_ecore_input"
 echo "  Ecore_Input_Evas.............: $have_ecore_input_evas"
diff --git a/ecore/src/modules/immodules/Makefile.am b/ecore/src/modules/immodules/Makefile.am
index 6978672..8012dad 100644
--- a/ecore/src/modules/immodules/Makefile.am
+++ b/ecore/src/modules/immodules/Makefile.am
@@ -5,3 +5,7 @@ SUBDIRS =
 if BUILD_ECORE_IMF_XIM
 SUBDIRS += xim
 endif
+
+if BUILD_ECORE_IMF_UIM
+SUBDIRS += uim
+endif
diff --git a/ecore/src/modules/immodules/uim/Makefile.am b/ecore/src/modules/immodules/uim/Makefile.am
new file mode 100644
index 0000000..bfdf86d
--- /dev/null
+++ b/ecore/src/modules/immodules/uim/Makefile.am
@@ -0,0 +1,26 @@
+MAINTAINERCLEANFILES = Makefile.in
+
+AM_CPPFLAGS = \
+-I$(top_srcdir) \
+-I$(top_srcdir)/src/lib/ecore \
+-I$(top_srcdir)/src/lib/ecore_input \
+-I$(top_srcdir)/src/lib/ecore_x \
+-I$(top_srcdir)/src/lib/ecore_imf \
+-I$(top_builddir)/src/lib/ecore \
+-I$(top_builddir)/src/lib/ecore_input \
+-I$(top_builddir)/src/lib/ecore_x \
+-I$(top_builddir)/src/lib/ecore_imf \
+-DPACKAGE_LIB_DIR=\"$(libdir)\" \
+-DPACKAGE_DATA_DIR=\"$(datadir)/$(PACKAGE)\" \
+@EVAS_CFLAGS@ \
+@EINA_CFLAGS@
+
+pkgdir = $(libdir)/ecore/immodules
+
+pkg_LTLIBRARIES = uim.la
+uim_la_SOURCES = \
+ecore_imf_uim.c
+uim_la_LIBADD  = $(top_builddir)/src/lib/ecore_imf/libecore_imf.la
+uim_la_LDFLAGS = -no-undefined @lt_enable_auto_import@ -module -avoid-version
+uim_la_LIBTOOLFLAGS = --tag=disable-static
+uim_la_DEPENDENCIES = $(top_builddir)/config.h
diff --git a/ecore/src/modules/immodules/uim/ecore_imf_uim.c b/ecore/src/modules/immodules/uim/ecore_imf_uim.c
new file mode 100644
index 0000000..1aff9ef
--- /dev/null
+++ b/ecore/src/modules/immodules/uim/ecore_imf_uim.c
@@ -0,0 +1,224 @@
+#include <Eina.h>
+#include <Ecore.h>
+#include <Ecore_Input.h>
+#include <Ecore_IMF.h>
+#include <Ecore_X.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <langinfo.h>
+#include <assert.h>
+#include <uim/uim.h>
+#include <uim/uim-util.h>
+#ifdef HAVE_CONFIG_H
+# include <config.h>
+#endif
+
+#define UIM_DEFAULT_ENCODING "UTF-8"
+
+typedef struct _Ecore_IMF_Context_Data Ecore_IMF_Context_Data;
+struct _Ecore_IMF_Context_Data
+{
+};
+
+static void
+commit_cb()void *ptr, const char *str)
+{
+   Ecore_IMF_Context *ctx = (Ecore_IMF_Context *)ptr;
+   ecore_imf_context_commit_event_add(ctx, str);
+}
+
+static void
+clear_cb(void *ptr)
+{
+   Ecore_IMF_Context *ctx = (Ecore_IMF_Context *)ptr; 
+}
+
+static void
+pushback_cb(void *ptr, 
+            __attribute__((unused)) int attr,
+            __attribute__((unused)) const char *str)
+{
+   Ecore_IMF_Context *ctx = (Ecore_IMF_Context *)ptr; 
+}
+
+static void
+update_cb(void *ptr)
+{
+   Ecore_IMF_Context *ctx = (Ecore_IMF_Context *)ptr; 
+}
+
+static void
+_ecore_imf_context_uim_add(Ecore_IMF_Context *ctx)
+{
+   EINA_LOG_DBG("in");
+   uim_context uim_ctx = NULL;
+
+   uim_ctx = uim_create_context(ctx, UIM_DEFAULT_ENCODING,
+                                NULL, NULL, 
+                                uim_iconv, /* XXX */
+                                commit_cb);
+   if(!uim_ctx) goto error;
+
+   uim_set_preedit_cb(uim_ctx, clear_cb, pushback_cb, update_cb);
+
+   ecore_imf_context_data_set(ctx, uim_ctx);
+
+ error:
+   if(uim_ctx)
+       uim_release_context(uim_ctx);
+}
+
+static void
+_ecore_imf_context_uim_del(Ecore_IMF_Context *ctx)
+{
+   EINA_LOG_DBG("in");
+   uim_context uim_ctx;   
+
+   uim_ctx = ecore_imf_context_data_get(ctx);
+   uim_release_context(uim_ctx);
+}
+
+static void
+_ecore_imf_context_uim_client_window_set(__attribute__((unused)) Ecore_IMF_Context *ctx,
+                                         __attribute__((unused)) void              *window)
+{
+   EINA_LOG_DBG("in");
+}
+
+static void
+_ecore_imf_context_uim_preedit_string_get(__attribute__((unused))Ecore_IMF_Context *ctx,
+                                          __attribute__((unused)) char             **str,
+                                          __attribute__((unused)) int               *cursor_pos)
+{
+   EINA_LOG_DBG("in");
+}
+
+static void
+_ecore_imf_context_uim_focus_in(Ecore_IMF_Context *ctx)
+{
+   EINA_LOG_DBG("in");
+   uim_context uim_ctx;   
+
+   uim_ctx = ecore_imf_context_data_get(ctx);
+   uim_focus_in_context(uim_ctx);
+}
+
+static void
+_ecore_imf_context_uim_focus_out(Ecore_IMF_Context *ctx)
+{
+   EINA_LOG_DBG("in");
+   uim_context uim_ctx;   
+
+   uim_ctx = ecore_imf_context_data_get(ctx);
+   uim_focus_out_context(uim_ctx);
+}
+
+static void
+_ecore_imf_context_uim_reset(__attribute__((unused)) Ecore_IMF_Context *ctx)
+{
+   EINA_LOG_DBG("%s in", __FUNCTION__);
+   uim_context uim_ctx;
+   uim_ctx = ecore_imf_context_data_get(ctx);
+   uim_reset_context(uim_ctx);
+}
+
+static void
+_ecore_imf_context_uim_use_preedit_set(__attribute__((unused)) Ecore_IMF_Context *ctx,
+                                       __attribute__((unused)) Eina_Bool          use_preedit)
+{
+   EINA_LOG_DBG("in");
+}
+
+static Eina_Bool
+_ecore_imf_context_uim_filter_event(__attribute__((unused)) Ecore_IMF_Context   *ctx,
+                                    __attribute__((unused)) Ecore_IMF_Event_Type type,
+                                    __attribute__((unused)) Ecore_IMF_Event     *event)
+{
+   EINA_LOG_DBG("%s in", __FUNCTION__);
+   return EINA_FALSE;
+}
+
+
+static const Ecore_IMF_Context_Info uim_info = {
+   .id = "uim",
+   .description = "A multilingual input method framework",
+   .default_locales = "ko:ja:th:zh",
+   .canvas_type = "evas",
+   .canvas_required = 1,
+};
+
+static Ecore_IMF_Context_Class uim_class = {
+   .add = _ecore_imf_context_uim_add,
+   .del = _ecore_imf_context_uim_del,
+   .client_window_set = _ecore_imf_context_uim_client_window_set,
+   .client_canvas_set = NULL,
+   .show = NULL,
+   .hide = NULL,
+   .preedit_string_get = _ecore_imf_context_uim_preedit_string_get,
+   .focus_in = _ecore_imf_context_uim_focus_in,
+   .focus_out = _ecore_imf_context_uim_focus_out,
+   .reset = _ecore_imf_context_uim_reset,
+   .cursor_position_set = NULL,
+   .use_preedit_set = _ecore_imf_context_uim_use_preedit_set,
+   .input_mode_set = NULL,
+   .filter_event = _ecore_imf_context_uim_filter_event,
+   .preedit_string_with_attributes_get = NULL,
+   .prediction_allow_set = NULL,
+   .autocapital_type_set = NULL,
+   .control_panel_show = NULL,
+   .control_panel_hide = NULL,
+   .input_panel_layout_set = NULL,
+   .input_panel_layout_get = NULL,
+   .input_panel_language_set = NULL,
+   .input_panel_language_get = NULL,
+   .cursor_location_set = NULL,
+};
+
+static Ecore_IMF_Context *
+uim_imf_module_create(void)
+{
+   EINA_LOG_DBG("%s in", __FUNCTION__);
+   Ecore_IMF_Context *ctx = NULL;
+
+   ctx = ecore_imf_context_new(&uim_class);
+   if(!ctx)
+     goto error;
+
+   return ctx;
+
+error:
+   free(ctx);
+   return NULL;
+}
+
+static Ecore_IMF_Context *
+uim_imf_module_exit(void)
+{
+   return NULL;
+}
+
+Eina_Bool
+ecore_imf_uim_init(void)
+{
+   EINA_LOG_DBG("%s in", __FUNCTION__);
+   eina_init();
+
+   ecore_imf_module_register(&uim_info,
+                             uim_imf_module_create,
+                             uim_imf_module_exit);
+
+   uim_init();
+
+   return EINA_TRUE;
+}
+
+void
+ecore_imf_uim_shutdown(void)
+{
+   uim_quit();
+   eina_shutdown();
+}
+
+EINA_MODULE_INIT(ecore_imf_uim_init);
+EINA_MODULE_SHUTDOWN(ecore_imf_uim_shutdown);
